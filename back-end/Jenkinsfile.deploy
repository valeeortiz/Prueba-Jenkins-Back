pipeline {
    agent any

    environment {
        NETWORK_NAME = 'app-network'
        CONTAINER_NAME = 'container-dfp-backend'
        ENV_FILE = 'ENV_FILE'
    }

    stages {

        stage('Preparar Env File') {
            steps {
                withCredentials([file(credentialsId: env.ENV_FILE, variable: 'SECRET_FILE')]) {
                    bat 'powershell -Command "Copy-Item -Path \\"%SECRET_FILE%\\" -Destination \\".env\\""' 

                }
            }
        }

        stage('Verificar y Crear Red si no Existe') {
            steps {
                script {
                    def networkExists = bat(
                        script: "docker network ls --format "{{.Name}}" | findstr /B /C:"' + env.NETWORK_NAME + '" >nul && echo FOUND || echo NOTFOUND & exit 0",
                        returnStdout: true
                    ).trim()

                    if (networkExists == "NOTFOUND") {
                        echo "Red no existe, creando..."
                        bat "docker network create ${env.NETWORK_NAME}"
                    } else {
                        echo "Red '${env.NETWORK_NAME}' ya existe."
                    }
                }
            }
        }


        stage('Reiniciar Contenedor del Proyecto') {
            steps {
                script {
                    def isRunning = bat(
                    script: "docker ps --format \"{{.Names}}\" | findstr /B /C:\"${env.CONTAINER_NAME}\" >nul && echo RUNNING || echo NOTRUNNING & exit 0",
                    returnStdout: true
                    ).trim()

                    def exists = bat(
                        script: "docker ps -a --format \"{{.Names}}\" | findstr /B /C:\"${env.CONTAINER_NAME}\" >nul && echo EXISTS || echo NOTEXISTS & exit 0",
                        returnStdout: true
                    ).trim()

                    if (isRunning == "RUNNING") {
                        echo "Contenedor está corriendo. Deteniéndolo..."
                        bat "docker stop ${env.CONTAINER_NAME}"
                    }

                    if (exists == "EXISTS") {
                        echo "Contenedor existe. Eliminándolo..."
                        bat "docker rm ${env.CONTAINER_NAME}"
                    } else {
                        echo "Contenedor no existe. Se creará con docker-compose."
                    }
                }
            }
        }

        stage('Desplegar con Docker Compose') {
            steps {
                dir('back-end') {
                    bat 'docker-compose up -d'
                }
            }
        }
    }
}
